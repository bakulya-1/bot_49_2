from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyexpat.errors import messages

from config import bot
import os
import random


async def  quiz_1(message: types.Message):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True, row_width=2)

    button = InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data='button1')

    keyboard.add(button)

    question = 'BMW or Mercedes'

    answer  = ['BMW', 'Mercedes', '–û–±–∞']

    await bot.send_poll(
        chat_id=message.chat.id,     # –ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        question=question,           # –°–∞–º –≤–æ–ø—Ä–æ—Å
        options=answer,              # –û—Ç–≤–µ—Ç—ã
        is_anonymous=False,          # –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∏–ª–∏ –Ω–µ—Ç
        type='quiz',                 # –¢–∏–ø –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
        correct_option_id=0,         # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        explanation='–ù–µ-–∞',          # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        open_period=60,              # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
        reply_markup=keyboard        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    )

async  def quiz_2(call: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True, row_width=2)

    button = InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data='button2')

    keyboard.add(button)

    question = 'Dota2 or CS GO'
    answer = ['Dota2', 'CS GO']

    await bot.send_poll(
        chat_id=call.from_user.id,
        question=question,
        options=answer,
        is_anonymous=True,
        type='quiz',
        correct_option_id=1,
        explanation='–≠—Ö —Ç—ã...',
        open_period=60,
        reply_markup=keyboard
    )

async def quiz_3(call: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True, row_width=2)

    button = InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data='button3')

    keyboard.add(button)

    question = '–£–∂–∞—Å—ã or –§–∏–ª—å–º—ã'
    answer = ['–£–∂–∞—Å—ã', '–§–∏–ª—å–º—ã']

    await bot.send_poll(
        chat_id=call.from_user.id,
        question=question,
        options=answer,
        is_anonymous=True,
        type='quiz',
        correct_option_id=0,
        explanation='–•–µ-—Ö–µ',
        open_period=60,
        reply_markup=keyboard
    )


async def quiz_4(call: types.CallbackQuery):

    question = 'Apple or Android'
    answer = ['Apple', 'Android', '–û–±–∞']

    await bot.send_poll(
        chat_id=call.from_user.id,
        question=question,
        options=answer,
        is_anonymous=False,
        type='quiz',
        correct_option_id=2,
        explanation='–í–æ—Ç —Ç–∞–∫',
        open_period=60
    )
    photo_path = os.path.join('media', 'img_1.png')
    with open(photo_path, 'rb') as photo:
        await bot.send_photo(
            chat_id=call.from_user.id,
            photo=photo,
            caption=question,
        )




games = ['‚öΩ', 'üé∞', 'üèÄ', 'üéØ', 'üé≥', 'üé≤']

game_state = {}

async def game_dice(message: types.Message):
    await bot.send_message(
        chat_id=message.chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É: \n\n1. ‚öΩ –§—É—Ç–±–æ–ª\n2. üé∞ –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞\n3. üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª\n4. üéØ –ú–∏—à–µ–Ω—å\n5. üé≥ –ë–æ—É–ª–∏–Ω–≥\n6. üé≤ –ö–æ—Å—Ç–∏\n",
    )

    game_state[message.chat.id] = {"status": "waiting_for_game_choice"}

async def game_choice(message: types.Message):
    chat_id = message.chat.id
    if chat_id not in game_state or game_state[chat_id]["status"] != "waiting_for_game_choice":
        return

    choice = message.text.strip()

    if choice == "1" or choice.lower() == "—Ñ—É—Ç–±–æ–ª":
        await  start_football_game(message)
    elif choice == "2" or choice.lower() == "—Å–ª–æ—Ç-–º–∞—à–∏–Ω–∞":
        await start_slot_machine(message)
    elif choice == "3" or choice.lower() == "–±–∞—Å–∫–µ—Ç–±–æ–ª":
        await start_basketball_game(message)
    elif choice == "4" or choice.lower() == "–º–∏—à–µ–Ω—å":
        await  start_dart_game(message)
    elif choice == "5" or choice.lower() == "–±–æ—É–ª–∏–Ω–≥":
        await start_bowling_game(message)
    elif choice == "6" or choice.lower() == "–∫–æ—Å—Ç–∏":
        await  start_dice_game(message)
    else:
        await  bot.send_message(chat_id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

async def start_football_game(message: types.Message):
    player_score = random.randint(0, 5)
    bot_score = random.randint(0,5)

    result = "–í—ã –∑–∞–±–∏–ª–∏ –≥–æ–ª!" if player_score > bot_score else "–ë–æ—Ç –∑–∞–±–∏–ª –≥–æ–ª!"
    game_state[message.chat.id] = {"status": "game_in_progress", "game": "football"}

    await bot.send_message(chat_id=message.chat.id, text=f"–§—É—Ç–±–æ–ª:\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {player_score},\n–†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—Ç–∞: {bot_score}. {result}")


async def start_slot_machine(message: types.Message):
    player_symbols = [random.choice(["‚úà", "üí≤", "‚ò†", "üçÄ"]) for _ in range(3)]
    bot_symbols = [random.choice(["‚úà", "üí≤", "‚ò†", "üçÄ"]) for _ in range(3)]

    if player_symbols == bot_symbols:
        result = "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!"
    else:
        result = "–ù–µ –ø–æ–≤–µ–∑–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

    game_state[message.chat.id] = {"status": "game_in_progress", "game": "slot_machine"}

    await bot.send_message(chat_id=message.chat.id, text=f"–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞:\n–ò–≥—Ä–æ–∫: {''.join(player_symbols)}\n–ë–æ—Ç: {''.join(bot_symbols)}\n{result}")


async def start_basketball_game(message: types.Message):
    player_shoot = random.randint(1, 5)
    bot_shoot = random.randint(1, 5)

    result = "–í—ã –ø–æ–ø–∞–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É!" if player_shoot > 5 else "–í—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å!"
    bot_result = "–ë–æ—Ç –ø–æ–ø–∞–ª –≤ –∫–æ—Ä–∑–∏–Ω—É!" if bot_shoot > 5 else "–ë–æ—Ç –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è!"

    game_state[message.chat.id] = {"status": "game_in_progress", "game": "basketball"}

    await bot.send_message(chat_id=message.chat.id, text=f"–ë–∞—Å–∫–µ—Ç–±–æ–ª:\n–í–∞—à –±—Ä–æ—Å–æ–∫: {player_shoot} (—Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result})\n–ë–æ—Ç: {bot_shoot} (—Ä–µ–∑—É–ª—å—Ç–∞—Ç: {bot_result})")


async def start_dart_game(message: types.Message):
    player_score = random.randint(0, 50)
    bot_score = random.randint(0, 50)

    result = "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!" if player_score > bot_score else "–ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª!"

    game_state[message.chat.id] = {"status": "game_in_progress", "game": "dart"}

    await bot.send_message(chat_id=message.chat.id, text=f"–ú–∏—à–µ–Ω—å (–î–∞—Ä—Ç—Å):\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {player_score}\n–†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—Ç–∞: {bot_score}\n{result}")


async def start_bowling_game(message: types.Message):
    player_pins = sum(random.randint(0, 10) for _ in range (5))
    bot_pins = sum(random.randint(0, 10) for _ in range(5))

    result = "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!" if player_pins > bot_pins else "–ë–æ—Ç –ø–æ–±–µ–¥–∏–ª!"

    game_state[message.chat.id] = {"status": "game_in_progress", "game": "bowling"}

    await bot.send_message(chat_id=message.chat.id, text=f"–ë–æ—É–ª–∏–Ω–≥:\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {player_pins} —Å–±–∏—Ç—ã—Ö –∫–µ–≥–ª–µ–π\n–†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—Ç–∞: {bot_pins} —Å–±–∏—Ç—ã—Ö –∫–µ–≥–ª–µ–π\n {result}")


async def start_dice_game(message: types.Message):
    player_roll = random.randint(1, 6)
    bot_roll = random.randint(1,6)

    result = "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!" if player_roll > bot_roll else "–ë–æ—Ç –ø–æ–±–µ–¥–∏–ª!"

    game_state[message.chat.id] = {"status": "game_in_progress", "game": "dice"}

    await bot.send_message(chat_id=message.chat.id, text=f"–ö–æ—Å—Ç–∏:\n–í–∞—à –±—Ä–æ—Å–æ–∫: {player_roll}\n–ë–æ—Ç: {bot_roll}\n{result}")




game_state = {}

dice_symbols = ['‚öΩ', 'üé∞', 'üèÄ']
dice_descriptions = {
    '‚öΩ': "–§—É—Ç–±–æ–ª. –ë–æ—Ç –∏ –∏–≥—Ä–æ–∫ –ø—ã—Ç–∞—é—Ç—Å—è –∑–∞–±–∏—Ç—å –≥–æ–ª.",
    'üé∞': "–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞. –ò–≥—Ä–∞–µ–º –Ω–∞ —É–¥–∞—á—É!",
    'üèÄ': "–ë–∞—Å–∫–µ—Ç–±–æ–ª. –ö—Ç–æ –ø–æ–ø–∞–¥–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É?"
}


async def start_game(message: types.Message):
    await bot.send_message(
        chat_id=message.chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ 3 –¥–∞–π—Å–æ–≤:\n1. ‚öΩ –§—É—Ç–±–æ–ª\n2. üé∞ –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞\n3. üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª\n"
             "–í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å."
    )
    game_state[message.chat.id] = {"status": "waiting_for_dice_choice"}


async def game_choice(message: types.Message):
    chat_id = message.chat.id

    if game_state.get(chat_id, {}).get("status") == "waiting_for_dice_choice":
        choice = message.text.strip()

        if choice == "1" or choice.lower() == "‚öΩ":
            await start_dice_game(message, '‚öΩ')
        elif choice == "2" or choice.lower() == "üé∞":
            await start_dice_game(message, 'üé∞')
        elif choice == "3" or choice.lower() == "üèÄ":
            await start_dice_game(message, 'üèÄ')
        else:
            await bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")
            return

        game_state[chat_id]["status"] = "game_in_progress"
#    else:
#        await bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /game.")


async def start_dice_game(message: types.Message, dice: str):
    chat_id = message.chat.id


    player_roll = random.randint(1, 6)
    bot_roll = random.randint(1, 6)

    await bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {dice}. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã:")

    if dice == '‚öΩ':
        result = await play_football(player_roll, bot_roll)
    elif dice == 'üé∞':
        result = await play_slot_machine(player_roll, bot_roll)
    elif dice == 'üèÄ':
        result = await play_basketball(player_roll, bot_roll)


    await bot.send_message(chat_id, result)

    game_state[chat_id]["status"] = "game_finished"


# ‚öΩ
async def play_football(player_roll, bot_roll):
    if player_roll > bot_roll:
        return f"–í–∞—à –±—Ä–æ—Å–æ–∫: {player_roll}. –ë–æ—Ç –±—Ä–æ—Å–∏–ª: {bot_roll}. –í—ã –∑–∞–±–∏–ª–∏ –≥–æ–ª –∏ –≤—ã–∏–≥—Ä–∞–ª–∏!"
    elif bot_roll > player_roll:
        return f"–í–∞—à –±—Ä–æ—Å–æ–∫: {player_roll}. –ë–æ—Ç –±—Ä–æ—Å–∏–ª: {bot_roll}. –ë–æ—Ç –∑–∞–±–∏–ª –≥–æ–ª –∏ –≤—ã–∏–≥—Ä–∞–ª!"
    else:
        return f"–í–∞—à –±—Ä–æ—Å–æ–∫: {player_roll}. –ë–æ—Ç –±—Ä–æ—Å–∏–ª: {bot_roll}. –ù–∏—á—å—è!"

# üé∞
async def play_slot_machine(player_roll, bot_roll):

    player_symbols = ["üçí", "üçá", "üçÄ", "üçâ", "üçì"]
    bot_symbols = ["üçí", "üçá", "üçÄ", "üçâ", "üçì"]

    player_spin = random.choice(player_symbols)
    bot_spin = random.choice(bot_symbols)

    if player_spin == bot_spin:
        return f"–í—ã –æ–±–∞ –≤—ã—Ç–∞—â–∏–ª–∏ {player_spin}. –≠—Ç–æ –Ω–∏—á—å—è!"
    elif player_spin != bot_spin:
        return f"–í—ã –≤—ã—Ç–∞—â–∏–ª–∏ {player_spin}, –∞ –ë–æ—Ç {bot_spin}. –ü–æ–±–µ–¥–∏–ª {player_spin}!"

#üèÄ
async def play_basketball(player_roll, bot_roll):
    if player_roll > bot_roll:
        return f"–í–∞—à –±—Ä–æ—Å–æ–∫: {player_roll}. –ë–æ—Ç –±—Ä–æ—Å–∏–ª: {bot_roll}. –í—ã –∑–∞–±–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –≤—ã–∏–≥—Ä–∞–ª–∏!"
    elif bot_roll > player_roll:
        return f"–í–∞—à –±—Ä–æ—Å–æ–∫: {player_roll}. –ë–æ—Ç –±—Ä–æ—Å–∏–ª: {bot_roll}. –ë–æ—Ç –∑–∞–±–∏–ª –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –≤—ã–∏–≥—Ä–∞–ª!"
    else:
        return f"–í–∞—à –±—Ä–æ—Å–æ–∫: {player_roll}. –ë–æ—Ç –±—Ä–æ—Å–∏–ª: {bot_roll}. –ù–∏—á—å—è!"



def register_handlers(dp: Dispatcher):
    dp.register_message_handler(quiz_1, commands=['quiz'])
    dp.register_callback_query_handler(quiz_2, text='button1')
    dp.register_callback_query_handler(quiz_3, text='button2')
    dp.register_callback_query_handler(quiz_4, text='button3')


#def register_handlers(dp: Dispatcher):
    dp.register_message_handler(game_dice, commands=['game'])
    dp.register_message_handler(game_choice)

    dp.register_message_handler(start_game, commands=['game'])
    dp.register_message_handler(game_choice)





